/**
 * @typedef { (string | number | boolean)[] | string | number | boolean } audioInfo
 * @typedef { {
 *     name: string,
 *     file: string,
 *     text: string | undefined,
 *     type: string,
 * } } textMap
 */
export class Audio {
    /**
     * 根据skill中的audio,audioname,audioname2和player来获取技能台词列表及其对应的源文件名
     * @typedef {{audio: audioInfo, audioname?: string[], audioname2?: {[playerName: string]: audioInfo}}} skillInfo
     * @param { object } options
     * @param { string } options.skill 技能名
     * @param { Player | string } [options.player] 角色/角色名
     * @param { audioInfo | skillInfo } [options.info] 使用指定的skillInfo/audioInfo
     * @param { audioInfo } [options.defaultInfo] 默认的audioInfo
     * @returns { textMap[] }
     */
    skill({ skill, player, info, defaultInfo }: {
        skill: string;
        player?: Player | string;
        info?: audioInfo | {
            audio: audioInfo;
            audioname?: string[];
            audioname2?: {
                [playerName: string]: audioInfo;
            };
        };
        defaultInfo?: audioInfo;
    }): textMap[];
    /**
     * 获取角色死亡时能播放的所有阵亡台词列表及其对应的源文件名
     * @param { object } options
     * @param { Player | string } options.player 角色/角色名
     * @param { audioInfo } [options.info] 使用指定的audioInfo
     * @param { audioInfo } [options.defaultInfo] 默认的audioInfo
     * @returns { textMap[] }
     */
    die({ player, info, defaultInfo }: {
        player: Player | string;
        info?: audioInfo;
        defaultInfo?: audioInfo;
    }): textMap[];
    /**
     * @param {textMap[]} list
     * @returns {string[]}
     */
    toFile(list: textMap[]): string[];
    /**
     * @param {textMap[]} list
     * @returns {string[]}
     */
    toText(list: textMap[]): string[];
    #private;
}
export type audioInfo = (string | number | boolean)[] | string | number | boolean;
export type textMap = {
    name: string;
    file: string;
    text: string | undefined;
    type: string;
};
